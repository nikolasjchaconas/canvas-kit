{"version":3,"file":"main.e33c2207cb234fde4a86.bundle.js","sources":["webpack:///./modules/core/react/dist/es6/lib/InputProvider.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar _a;\nimport * as React from 'react';\nexport var InputType;\n(function (InputType) {\n    InputType[\"Initial\"] = \"initial\";\n    InputType[\"Keyboard\"] = \"keyboard\";\n    InputType[\"Mouse\"] = \"mouse\";\n    InputType[\"Pointer\"] = \"pointer\";\n    InputType[\"Touch\"] = \"touch\";\n})(InputType || (InputType = {}));\nexport var InputEventType;\n(function (InputEventType) {\n    InputEventType[\"KeyDown\"] = \"keydown\";\n    InputEventType[\"KeyUp\"] = \"keyup\";\n    InputEventType[\"MouseDown\"] = \"mousedown\";\n    InputEventType[\"MouseMove\"] = \"mousemove\";\n    InputEventType[\"Wheel\"] = \"wheel\";\n    InputEventType[\"MouseWheel\"] = \"mousewheel\";\n    InputEventType[\"DOMMouseScroll\"] = \"DOMMouseScroll\";\n    InputEventType[\"MSPointerDown\"] = \"MSPointerDown\";\n    InputEventType[\"MSPointerMove\"] = \"MSPointerMove\";\n    InputEventType[\"PointerDown\"] = \"pointerdown\";\n    InputEventType[\"PointerMove\"] = \"pointermove\";\n    InputEventType[\"TouchStart\"] = \"touchstart\";\n})(InputEventType || (InputEventType = {}));\nvar formInputs = ['input', 'select', 'textarea'];\nvar ignoreMap = [\n    16,\n    17,\n    18,\n    91,\n    93,\n];\nexport var inputEventMap = (_a = {},\n    _a[InputEventType.KeyDown] = InputType.Keyboard,\n    _a[InputEventType.KeyUp] = InputType.Keyboard,\n    _a[InputEventType.MouseDown] = InputType.Mouse,\n    _a[InputEventType.MouseMove] = InputType.Mouse,\n    _a[InputEventType.Wheel] = InputType.Mouse,\n    _a[InputEventType.MouseWheel] = InputType.Mouse,\n    _a[InputEventType.DOMMouseScroll] = InputType.Mouse,\n    _a[InputEventType.MSPointerDown] = InputType.Pointer,\n    _a[InputEventType.MSPointerMove] = InputType.Pointer,\n    _a[InputEventType.PointerDown] = InputType.Pointer,\n    _a[InputEventType.PointerMove] = InputType.Pointer,\n    _a[InputEventType.TouchStart] = InputType.Touch,\n    _a);\nvar pointerMap = {\n    2: InputType.Touch,\n    3: InputType.Touch,\n    4: InputType.Mouse,\n};\nvar getPointerType = function (event) {\n    if (typeof event.pointerType === 'number') {\n        return pointerMap[event.pointerType];\n    }\n    else if (event.pointerType === 'mouse') {\n        return InputType.Mouse;\n    }\n    else {\n        return InputType.Touch;\n    }\n};\nvar detectWheel = function () {\n    var wheelType;\n    if ('onwheel' in document.createElement('div')) {\n        wheelType = 'wheel';\n    }\n    else {\n        wheelType = document.onmousewheel !== undefined ? 'mousewheel' : 'DOMMouseScroll';\n    }\n    return wheelType;\n};\nvar InputProvider = (function (_super) {\n    __extends(InputProvider, _super);\n    function InputProvider(props) {\n        var _this = _super.call(this, props) || this;\n        _this.provideIntent = _this.props.provideIntent;\n        var storedInput, storedIntent;\n        try {\n            storedInput = window.sessionStorage.getItem('what-input');\n            storedIntent = window.sessionStorage.getItem('what-intent');\n        }\n        catch (e) {\n            console.warn('Failed to retrieve input status from session storage' + e);\n        }\n        var supportsPassive;\n        try {\n            var opts = Object.defineProperty({}, 'passive', {\n                get: function () {\n                    supportsPassive = true;\n                },\n            });\n            var stub = function () {\n                return;\n            };\n            window.addEventListener('test', stub, opts);\n            window.removeEventListener('test', stub, opts);\n        }\n        catch (e) {\n            console.warn('Browser does not support passive event listeners');\n        }\n        _this.state = {\n            currentInput: storedInput || InputType.Initial,\n            currentIntent: storedIntent || InputType.Initial,\n            supportsPassive: supportsPassive || false,\n            isBuffering: false,\n            isScrolling: false,\n            mousePosX: null,\n            mousePosY: null,\n        };\n        _this.setInput = _this.setInput.bind(_this);\n        _this.setIntent = _this.setIntent.bind(_this);\n        _this.eventBuffer = _this.eventBuffer.bind(_this);\n        return _this;\n    }\n    InputProvider.prototype.componentDidMount = function () {\n        this.enableListeners(true);\n    };\n    InputProvider.prototype.componentDidUpdate = function () {\n        try {\n            window.sessionStorage.setItem('what-input', this.state.currentInput);\n            window.sessionStorage.setItem('what-intent', this.state.currentIntent);\n        }\n        catch (e) {\n            console.warn('Failed to set input status in session storage' + e);\n        }\n    };\n    InputProvider.prototype.componentWillUnmount = function () {\n        window.clearTimeout(this.eventTimer);\n        this.enableListeners(false);\n    };\n    InputProvider.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        if (nextProps !== this.props ||\n            nextState.currentInput !== this.state.currentInput ||\n            nextState.currentIntent !== this.state.currentIntent) {\n            return true;\n        }\n        return false;\n    };\n    InputProvider.prototype.enableListeners = function (enable) {\n        if (typeof window === 'undefined') {\n            return;\n        }\n        var options = this.state.supportsPassive ? { passive: true } : false;\n        var fn = enable ? window.addEventListener : window.removeEventListener;\n        if (window.PointerEvent) {\n            fn('pointerdown', this.setInput);\n        }\n        else if (window.MSPointerEvent) {\n            fn('MSPointerDown', this.setInput);\n        }\n        else {\n            fn('mousedown', this.setInput);\n            if ('ontouchstart' in window) {\n                fn('touchstart', this.eventBuffer, options);\n                fn('touchend', this.setInput);\n            }\n        }\n        if (this.provideIntent) {\n            if (window.PointerEvent) {\n                fn('pointermove', this.setIntent);\n            }\n            else if (window.MSPointerEvent) {\n                fn('MSPointerMove', this.setIntent);\n            }\n            else {\n                fn('mousemove', this.setIntent);\n            }\n            fn(detectWheel(), this.setIntent, options);\n        }\n        fn('keydown', this.eventBuffer);\n        fn('keyup', this.eventBuffer);\n    };\n    InputProvider.prototype.setInput = function (event) {\n        if (this.state.isBuffering) {\n            return;\n        }\n        var eventKey = 'which' in event ? event.which : undefined;\n        var eventType = event.type;\n        var value = inputEventMap[eventType];\n        if (value === InputType.Pointer) {\n            value = getPointerType(event);\n        }\n        var ignoreMatch = eventKey ? ignoreMap.indexOf(eventKey) === -1 : undefined;\n        var shouldUpdate = (value === InputType.Keyboard && eventKey && ignoreMatch) ||\n            value === InputType.Mouse ||\n            value === InputType.Touch;\n        if (this.state.currentInput !== value && shouldUpdate) {\n            this.setState({ currentInput: value });\n        }\n        if (this.state.currentIntent !== value && shouldUpdate && this.provideIntent) {\n            var activeElem = document.activeElement;\n            var notFormInput = activeElem &&\n                activeElem.nodeName &&\n                formInputs.indexOf(activeElem.nodeName.toLowerCase()) === -1;\n            if (notFormInput) {\n                this.setState({ currentIntent: value });\n            }\n        }\n    };\n    InputProvider.prototype.setIntent = function (event) {\n        this.detectScrolling(event);\n        if (!this.state.isBuffering && !this.state.isScrolling) {\n            var eventType = event.type;\n            var value = inputEventMap[eventType];\n            if (value === InputType.Pointer) {\n                value = getPointerType(event);\n            }\n            if (this.state.currentIntent !== value) {\n                this.setState({ currentIntent: value });\n            }\n        }\n    };\n    InputProvider.prototype.eventBuffer = function (event) {\n        var _this = this;\n        this.setInput(event);\n        window.clearTimeout(this.eventTimer);\n        this.setState({ isBuffering: true });\n        this.eventTimer = window.setTimeout(function () {\n            _this.setState({ isBuffering: false });\n        }, 100);\n    };\n    InputProvider.prototype.detectScrolling = function (event) {\n        if (this.state.mousePosX !== event.screenX || this.state.mousePosY !== event.screenY) {\n            this.setState({\n                isScrolling: false,\n                mousePosX: event.screenX,\n                mousePosY: event.screenY,\n            });\n        }\n        else {\n            this.setState({ isScrolling: true });\n        }\n    };\n    InputProvider.prototype.render = function () {\n        var intent = this.provideIntent ? this.state.currentIntent : null;\n        return (React.createElement(\"div\", { \"data-whatinput\": this.state.currentInput, \"data-whatintent\": intent }, this.props.children));\n    };\n    return InputProvider;\n}(React.Component));\nexport default InputProvider;\n"],"mappings":"AACA","sourceRoot":""}